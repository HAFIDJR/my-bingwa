openapi: 3.0.3
info:
  title: final-project-b11
  description: |-
    MOOC (Massive Open Online Course) app is a versatile online learning platform that offers open and extensive access to a diverse range of courses. Users can choose from high-quality courses taught by expert instructors from top educational institutions worldwide. The app provides flexible, affordable, and accessible learning experiences, allowing users to study at their own pace and convenience.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: Users
    description: Operations about user
  - name: UserProfiles
    description: Operations about UserProfile
  - name: Categories
    description: Operations about Category
  - name: Courses
    description: Operations about Course
  - name: Chapters
    description: Operations about Chapter
paths:
  /users/register:
    post:
      tags:
        - Users
      operationId: post-register-user
      summary: Register user
      description: Register user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/Register"
      responses:
        "201":
          description: User registration was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          newUser:
                            $ref: "#/components/schemas/UserModel"
                          newUserProfile:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              profilePicture:
                                type: string
                                example: null
                              fullName:
                                type: string
                                example: "Budi Cahyono"
                              phoneNumber:
                                type: string
                                example: "08123456789"
                              city:
                                type: string
                                example: null
                              country:
                                type: string
                                example: null
                              userId:
                                type: integer
                                example: 1
        "409":
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
  /users/login:
    post:
      tags:
        - Users
      operationId: post-login-user
      summary: Login user
      description: Login user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          description: User Login was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              email:
                                type: string
                                example: "budi@mail.com"
                              password:
                                type: string
                                example: "$2b$10$wpqr1W8aUNCN7BZZ3o6sz.meX9rB/aItp5Mw/0q7GaRmJbsU2GGbK"
                              otp:
                                type: string
                                example: "012345"
                              isVerified:
                                type: boolean
                                example: true
                              role:
                                type: string
                                example: "user"
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjk4Njk0MzI1fQ.mexfgD-aW24iYvoWYWQJWSv7AbJ5EqyIDrHS6iCk-d0"
        "401":
          description: invalid email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
        "403":
          description: Account not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
  /users/verify-otp:
    put:
      tags:
        - Users
      operationId: put-verify-otp-user
      summary: Verify otp user
      description: Verify otp user
      requestBody:
        $ref: "#/components/requestBodies/VerifyOtp"
      responses:
        "200":
          description: Verify otp user was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              email:
                                type: string
                                example: "budi@mail.com"
                              password:
                                type: string
                                example: "$2b$10$wpqr1W8aUNCN7BZZ3o6sz.meX9rB/aItp5Mw/0q7GaRmJbsU2GGbK"
                              otp:
                                type: string
                                example: "012345"
                              isVerified:
                                type: boolean
                                example: true
                              role:
                                type: string
                                example: "user"
        "401":
          description: Invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
  /users/resend-otp:
    put:
      tags:
        - Users
      operationId: put-resend-otp-user
      summary: Resend otp user
      description: Resend otp user
      requestBody:
        $ref: "#/components/requestBodies/ResendOtp"
      responses:
        "200":
          description: Resend otp user was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/UserModel"
  /users/forget-password:
    post:
      tags:
        - Users
      operationId: post-forget-password-user
      summary: Forget Password user
      description: Forget Password user
      requestBody:
        $ref: "#/components/requestBodies/ForgetPassword"
      responses:
        "200":
          description: Email sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/UserModel"
        "404":
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
  /users/update-password:
    put:
      tags:
        - Users
      operationId: put-update-password-user
      summary: Update password user
      description: Update password user
      parameters:
        - name: token
          in: query
          description: token for update password
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UpdatePassword"
      responses:
        "200":
          description: Email sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          updatedUser:
                            $ref: "#/components/schemas/UserModel"
                          newNotification:
                            $ref: "#/components/schemas/NotificationModel"
        "400":
          description: The password and password confirmation fields must match
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Please ensure that the password and password confirmation match!"
  /users/authenticate:
    get:
      tags:
        - Users
      operationId: get-user-by-authenticate
      summary: Get user by authenticate
      description: Get user by authenticate
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/UserModel"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
  /users/change-password:
    put:
      tags:
        - Users
      operationId: put-change-password-user-by-authenticate
      summary: Put Change Password User By Authenticate
      description: Put Change Password User By Authenticate
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ChangePassword"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          updatedUser:
                            $ref: "#/components/schemas/UserProfileModel"
                          newNotification:
                            $ref: "#/components/schemas/NotificationModel"
        "400":
          description: The password and password confirmation fields must match
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Please ensure that the new password and confirmation match!"
        "401":
          description: Incorrect old password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Incorrect old password"
  /user-profiles/update-profile:
    put:
      tags:
        - UserProfiles
      operationId: put-edit-user-by-authenticate
      summary: Put Edit User By Authenticate
      description: Put Edit User By Authenticate
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfile"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          newUserProfile:
                            $ref: "#/components/schemas/UserProfileModel"
  /categories:
    post:
      tags:
        - Categories
      operationId: post-create-category
      summary: Create Category
      description: Create category with the provided information.
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateCategory"
      responses:
        "201":
          description: Create category was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CategoryModel"
    get:
      tags:
        - Categories
      operationId: get-all-categories
      summary: Get all categories
      description: Get all categories
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/CategoryModel"
  /categories/{categoryId}:
    put:
      tags:
        - Categories
      operationId: put-category-by-id
      summary: Put category by id
      description: Edit category by id
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: The ID of the category to retrieve.
      requestBody:
        $ref: "#/components/requestBodies/EditCategory"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CategoryModel"
    delete:
      tags:
        - Categories
      operationId: delete-category-by-id
      summary: Delete category by id
      description: Delete category by id
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: The ID of the category to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CategoryModel"
  /courses:
    post:
      tags:
        - Courses
      operationId: post-create-course
      summary: Create course
      description: Create course with the provided information.
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateCourse"
      responses:
        "201":
          description: Create course was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CourseModel"
        "400":
          description: free class price must be 0
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
    get:
      tags:
        - Courses
      operationId: get-all-courses
      summary: Get all courses
      description: Get all courses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          Pagination:
                            $ref: "#/components/schemas/Pagination"
                          courses:
                            type: array
                            items:
                              $ref: "#/components/schemas/CourseModel"
  /courses/{courseId}:
    put:
      tags:
        - Courses
      operationId: put-course-by-id
      summary: Put course by id
      description: Edit course by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to retrieve.
      requestBody:
        $ref: "#/components/requestBodies/EditCourse"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CourseModel"
        "404":
          description: Course Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
    get:
      tags:
        - Courses
      operationId: get-course-by-id
      summary: get course by id
      description: get course by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CourseModel"
        "400":
          description: Course Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
    delete:
      tags:
        - Courses
      operationId: delete-course-by-id
      summary: delete course by id
      description: Delete course by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: The ID of the course to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CourseModel"
  /chapters:
    post:
      tags:
        - Chapters
      operationId: post-create-chapter
      summary: Create chapter
      description: Create chapter with the provided information.
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateChapter"
      responses:
        "201":
          description: Create chapter was successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ChapterModel"
    get:
      tags:
        - Chapters
      operationId: get-all-chapters
      summary: Get all chapters
      description: Get all chapters
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: array
                    properties:
                      data:
                        $ref: "#/components/schemas/ChapterModel"
  /chapters/{chapterId}:
    get:
      tags:
        - Chapters
      operationId: get-chapter-by-id
      summary: get chapter by id
      description: get chapter by id
      parameters:
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the chapter to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ChapterModel"
        "404":
          description: Chapter Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
    put:
      tags:
        - Chapters
      operationId: put-chapter-by-id
      summary: Put chapter by id
      description: Edit chapter by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the Chapter to retrieve.
      requestBody:
        $ref: "#/components/requestBodies/EditChapter"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ChapterModel"
        "404":
          description: Chapter Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
    delete:
      tags:
        - Chapters
      operationId: delete-chapter-by-id
      summary: delete chapter by id
      description: Delete chapter by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chapterId
          schema:
            type: integer
          required: true
          description: The ID of the chapter to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ChapterModel"
        "404":
          description: Chapter Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "failed"
components:
  schemas:
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "success"
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/users?page=3&limit=10"
            prev:
              type: string
              example: "https://domain.com/users?page=1&limit=10"
        total_items:
          type: integer
          example: 10
    UserModel:
      title: User
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "budi@mail.com"
        password:
          type: string
          example: "$2b$10$wpqr1W8aUNCN7BZZ3o6sz.meX9rB/aItp5Mw/0q7GaRmJbsU2GGbK"
        otp:
          type: string
          example: "012345"
        isVerified:
          type: boolean
          example: false
        role:
          type: string
          example: "user"
    UserProfileModel:
      title: User Profile
      type: object
      properties:
        id:
          type: integer
          example: 1
        profilePicture:
          type: string
          example: "https://ik.imagekit.io/budi123/1628693262177_a8Y3AhxNv.png"
        fullName:
          type: string
          example: "Budi Cahyono"
        phoneNumber:
          type: string
          example: "08123456789"
        city:
          type: string
          example: "Vancouver"
        country:
          type: string
          example: "Canada"
        userId:
          type: integer
          example: 1
    NotificationModel:
      title: Notification
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Notification"
        message:
          type: string
          example: "Password successfully updated!"
        isRead:
          type: boolean
          example: false
        createdAt:
          type: string
          example: "2023-11-24T01:11:59.133Z"
        userId:
          type: integer
          example: 1
    CategoryModel:
      title: Category
      type: object
      properties:
        id:
          type: integer
          example: 1
        categoryName:
          type: string
          example: "UI/UX Design"
    CourseModel:
      title: Course
      type: object
      properties:
        id:
          type: integer
          example: 1
        courseName:
          type: string
          example: "Intro to Basic of User Interaction Design"
        price:
          type: integer
          example: 250000
        rating:
          type: integer
          example: 5
        level:
          type: string
          example: "Begginer Level"
        aboutCourse:
          type: string
          example: "Design system adalah kumpulan komponen design, code, ataupun dokumentasi yang dapat digunakan sebagai panduan utama yang memunginkan designer serta developer memiliki lebih banyak kontrol atas berbagai platform."
        targetAudience:
          type: string
          example: "Anda yang ingin memahami poin penting design system"
        learningMaterial:
          type: string
          example: "Anda yang ingin latihan membangun design system"
        mentor:
          type: string
          example: "Simon Doe"
        isPremium:
          type: boolean
          example: true
        videoURL:
          type: string
          example: "https://youtu.be/ixOd42SEUF0"
        forumURL:
          type: string
          example: "https://web.telegram.org"
        duration:
          type: string
          example: "120 Minute"
        release:
          type: string
          example: "2023-11-24T01:11:59.133Z"
        categoryId:
          type: integer
          example: 1
        promotionId:
          type: integer
          example: 1
    ChapterModel:
      title: Chapter
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Intro to Basic of User Interaction Design"
        createdAt:
          type: string
          example: "2023-11-24T01:11:59.133Z"
  requestBodies:
    Register:
      content:
        application/json:
          schema:
            type: object
            properties:
              fullName:
                type: string
                example: "Budi Cahyono"
              email:
                type: string
                example: "budi@mail.com"
              phoneNumber:
                type: string
                example: "08123456789"
              password:
                type: string
                example: "123456"
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "budi@mail.com"
              password:
                type: string
                example: "123456"
    VerifyOtp:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "budi@mail.com"
              otp:
                type: string
                example: "012345"
    ResendOtp:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "budi@mail.com"
    ForgetPassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "budi@mail.com"
    UpdatePassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                example: "123456"
              passwordConfirmation:
                type: string
                example: "123456"
    ChangePassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              oldPassword:
                type: string
                example: "123456"
              newPassword:
                type: string
                example: "test123"
              newPasswordConfirmation:
                type: string
                example: "test123"
    UpdateProfile:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              image:
                type: string
                format: binary
              fullName:
                type: string
                example: "Budi Cahyono"
              phoneNumber:
                type: string
                example: "08123456789"
              city:
                type: string
                example: "Vancouver"
              country:
                type: string
                example: "Canada"
    CreateCategory:
      content:
        application/json:
          schema:
            type: object
            properties:
              categoryName:
                type: string
                example: "UI/UX Design"
    EditCategory:
      content:
        application/json:
          schema:
            type: object
            properties:
              categoryName:
                type: string
                example: "UI/UX Design"
    CreateCourse:
      content:
        application/json:
          schema:
            type: object
            properties:
              courseName:
                type: string
                example: "Intro to Basic of User Interaction Design"
              price:
                type: integer
                example: 250000
              rating:
                type: integer
                example: 5
              level:
                type: string
                example: "Begginer Level"
              aboutCourse:
                type: string
                example: "Design system adalah kumpulan komponen design, code, ataupun dokumentasi yang dapat digunakan sebagai panduan utama yang memunginkan designer serta developer memiliki lebih banyak kontrol atas berbagai platform."
              targetAudience:
                type: string
                example: "Anda yang ingin memahami poin penting design system"
              learningMaterial:
                type: string
                example: "Anda yang ingin latihan membangun design system"
              mentor:
                type: string
                example: "Simon Doe"
              isPremium:
                type: boolean
                example: true
              videoURL:
                type: string
                example: "https://youtu.be/ixOd42SEUF0"
              forumURL:
                type: string
                example: "https://web.telegram.org"
              duration:
                type: string
                example: "120 Minute"
              categoryId:
                type: integer
                example: 1
              promotionId:
                type: integer
                example: null
    EditCourse:
      content:
        application/json:
          schema:
            type: object
            properties:
              courseName:
                type: string
                example: "Intro to Basic of User Interaction Design"
              price:
                type: integer
                example: 250000
              rating:
                type: integer
                example: 5
              level:
                type: string
                example: "Begginer Level"
              aboutCourse:
                type: string
                example: "Design system adalah kumpulan komponen design, code, ataupun dokumentasi yang dapat digunakan sebagai panduan utama yang memunginkan designer serta developer memiliki lebih banyak kontrol atas berbagai platform."
              targetAudience:
                type: string
                example: "Anda yang ingin memahami poin penting design system"
              learningMaterial:
                type: string
                example: "Anda yang ingin latihan membangun design system"
              mentor:
                type: string
                example: "Simon Doe"
              isPremium:
                type: boolean
                example: true
              videoURL:
                type: string
                example: "https://youtu.be/ixOd42SEUF0"
              forumURL:
                type: string
                example: "https://web.telegram.org"
              duration:
                type: string
                example: "120 Minute"
              categoryId:
                type: integer
                example: 1
              promotionId:
                type: integer
                example: null
    CreateChapter:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Chapter 1 - Pendahuluan"
    EditChapter:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Chapter 1 - Pendahuluan"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
